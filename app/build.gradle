apply plugin: 'com.android.application'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 25
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.zegoggles.smssync"
        minSdkVersion 9
        targetSdkVersion 25
        versionCode 1564
        versionName "1.5.11-beta11"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig keystoreProperties.isEmpty() ? null : signingConfigs.release
        }
    }

    lintOptions {
        // http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html#com.android.build.gradle.internal.dsl.LintOptions
        warningsAsErrors true
    }

    //  avoid "Duplicate files copied in APK META-INF/"
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_6
        targetCompatibility JavaVersion.VERSION_1_6
    }
}

dependencies {
    compile 'com.squareup:otto:1.3.8'
    compile 'com.github.jberkel.k-9:k9mail-library:sms-backup-plus-1.5.11-SNAPSHOT'
    compile 'com.android.billingclient:billing:1.0'
    compile 'com.firebase:firebase-jobdispatcher:0.8.5'
    compile 'com.android.support:support-annotations:25.3.1'
    compile 'com.android.support:preference-v7:25.3.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.6.1'
    testCompile 'org.robolectric:shadows-httpclient:3.0'
    testCompile "com.google.truth:truth:0.39"
    testCompile 'org.mockito:mockito-all:1.10.17'
}

task checkVersion {
    def versionName = android.defaultConfig.versionName
    doFirst {
        //  # make sure new version is propagated everywhere
        if (!(new File('CHANGES').text.contains(versionName))) {
            throw new RuntimeException("CHANGES not updated")
        }
        if (!(new File('app/src/main/assets/about.html').text.contains("SMS Backup+ $versionName"))) {
            throw new RuntimeException("about.html not updated")
        }
    }

}

task(tag(type: Exec) {
    executable "sh"
    args "-c", """
        git commit --allow-empty -a -m 'Release $android.defaultConfig.versionName' &&
        git tag $android.defaultConfig.versionName &&
        git push --tags origin master
    """
}).dependsOn(checkVersion)

tasks.withType(JavaCompile) {
    if (!it.name.toLowerCase().contains('test')) {
        options.compilerArgs = ['-Werror',  '-Xlint:unchecked', '-Xlint:deprecation']
    }
}
